
    instrukcja metody drugiej - SIMULATED ANNEALING z mechanizmem tabu list i neighbourhood search

1.Tworzymy graspem rozwiazanie, przyjmujemy je jako current solution.

2.To rozwiazanie poddajemy operacji losowo wybranym operatorem (operatory z operators.cpp wybieramy w funkcji generate neighbourhood), 
w ten sposób tworząc sąsiedztwo wcześniejszego rozwiązania. 

3. To sąsiedztwo jeśli spełnia warunki simulated annealing przyjmujemy jako current solution i dodajemy do tabu list, jesli nie spelnia warunkow to 
nie zmieniamy wcześniejszego current solution.
    
    Dygresja: SIMULATED ANNEALING: warunkiem przyjecia nowego rozwiazania jest funkcja 

            bool Tabu::accept_worse_solution(double delta_cost, double temperature)
        {
            if (delta_cost < 0)
                return true;
            std::random_device rd;
            std::mt19937 gen(rd());
            std::uniform_real_distribution<> dist(0, 1);
            return dist(gen) < std::exp(-delta_cost / temperature);
        }
        
        gdzie delta_cost to roznica koszt_stworzonego_sasiedztwa - koszt_rozwiazania_z_ktorego_tworzylismy_sasiedztwo
        temperatura to parametr ktory z czasem dzialania programu maleje, co sprawia ze na poczatku daje wiecej roznorodnosci 
        a na koncu temperatura ~ 0.1 wiec tylko lepsze rozwiazania

    Czyli:
        jesli sasiedztwo ma mniejszy koszt od koszt_rozwiazania_z_ktorego_tworzylismy_sasiedztwo to jest zawsze przyjete.
        Jesli nie to jest pewne prawdopodobienstwo zalezne od delty i temperatury ze przyjete.

    Dygresja 2: Do tabu search dodajemy delta_cost kazdego przyjetego rozwiazania, aby uniknac problemu ze po zmniejszonym/zwiekszonym koszcie,
                spowrotem otrzymamy wczesniejsze rozwiazanie
                (np zmieni sie node 3 i 2 z deltą 50, następnie zmieni się node 2 i 3 z deltą -50 i jesteśmy w tym samym miejscu co 2 iteracje wcześniej)

4. Jesli koszt mniejszy od poprzedniego to zapisujemy jako najlepszy - best_solution_cost, jesli slabszy ale nadal przyjety to lecimy dalej.

    Operatory: (nazwy moga sie zmienic)
        w poszukiwaniu sąsiedztwa rozwiązania użyte zostały operatory takie jak:
            for_delta - najlepsze rozwiazanie ma najwieksza delte nie wazne czy ujemna czy dodatnia, 

            swap_two_nodes_for_delta/swap_two_nodes_for_minimalization - swap nodeow w 2 innych trasach
                                    mamy:    trasa 1: 1 2 3 4 5          trasa 2: 6 7 8 9 10
                    możemy otrzymać np:    trasa 1: 1 2 7 4 5         trasa 2: 6 3 8 9 10

            two_opt_swap - laczenie prefixu jednej trasy z sufixem drugiej w losowym punkcie przeciecia tras.
                                    mamy:    trasa 1: 1 2 3 4 5          trasa 2: 6 7 8 9 10
                    możemy otrzymać np:    trasa 1: 1 2 3 9 10         trasa 2: 6 7 8 4 5

            move_node_for_delta/move_node_for_minimalization - przeniesienie jednego klienta do innej trasy na daną pozycje 
                                    mamy:    trasa 1: 1 2 3 4 5          trasa 2: 6 7 8 9 10
                    możemy otrzymać np:    trasa 1: 1 3 4 5         trasa 2: 6 7 8 2 9 10                                      

            route_splitting_and_merging - dzielenie trasy na 2 podtrasy, nastepnie probujemy 2 podtrase wcisnac do innych tras.
                                    mamy:    trasa 1: 1 2 3 4 5          trasa 2: 6 7 8 9 10
                    możemy otrzymać np:    trasa 1: 1 2         trasa 2: 6 7 8 3 4 5 9 10 

            reduce_truck_count - sortujemy trase pod wzgledem skomplikowania (koszt trasy i ilosc klientow), zaczynamy od najmniej skomplikowanych tras
                                 i probujemy je wcisnac w inna trase w 3 miejscach na poczatku na srodku i koncu.
                                    mamy:    trasa 1: 1 2          trasa 2: 6 7 8 9 10
                    możemy otrzymać np:    trasa 1: WYCIECIE TRASY         trasa 2: 6 1 2 7 8 9 10                                  


PARAMETRY: 
    start_temperature - parametr simulated annealing skladajacy sie na sprawdzanie czy przyjac nowe rozwiazanie, 
                  na poczatku duzy, natomiast w trakcie trwania spada z kazda iteracja.
    
    min_temperature - parametr okresla na jakiej wartosci temperatura sie zatrzyma i nie bedzie wiecej malec.

    cooling_factor - parametr określa szybkość spadku temperatury. To liczba z którą temperatura jest mnożona co iteracje.

    Tabu_list_size - parametr określający wiadomo co, jego zmiana nie ma za duzo znaczenia jesli jest okolo 10 to starcza bo to bardziej mechanizm dodatkowy do
                     simulated annealing.

    istnieją jeszcze parametry określające prawdopodobienstwo użycia danego operatora przy tworzeniu sąsiedztwa, są to wagi prawdopodobienstwa,
        lecz nie są to parametry metaheurystyki (choć mają nie mały wpływ na rozwiązanie).